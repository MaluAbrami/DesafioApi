// <auto-generated />
using System;
using DesafioApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DesafioApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DesafioApi.Models.Gato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NomeRaca")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UrlImagem")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("racaid")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("racaid");

                    b.ToTable("Gatos");
                });

            modelBuilder.Entity("DesafioApi.Models.Raca", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("adaptability")
                        .HasColumnType("int");

                    b.Property<int>("affection_level")
                        .HasColumnType("int");

                    b.Property<string>("alt_names")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("cfa_url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("child_friendly")
                        .HasColumnType("int");

                    b.Property<string>("country_code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("country_codes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("dog_friendly")
                        .HasColumnType("int");

                    b.Property<int>("energy_level")
                        .HasColumnType("int");

                    b.Property<int>("experimental")
                        .HasColumnType("int");

                    b.Property<int>("grooming")
                        .HasColumnType("int");

                    b.Property<int>("hairless")
                        .HasColumnType("int");

                    b.Property<int>("health_issues")
                        .HasColumnType("int");

                    b.Property<int>("hypoallergenic")
                        .HasColumnType("int");

                    b.Property<int>("indoor")
                        .HasColumnType("int");

                    b.Property<int>("intelligence")
                        .HasColumnType("int");

                    b.Property<int>("lap")
                        .HasColumnType("int");

                    b.Property<string>("life_span")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("natural")
                        .HasColumnType("int");

                    b.Property<string>("origin")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("rare")
                        .HasColumnType("int");

                    b.Property<string>("reference_image_id")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("rex")
                        .HasColumnType("int");

                    b.Property<int>("shedding_level")
                        .HasColumnType("int");

                    b.Property<int>("short_legs")
                        .HasColumnType("int");

                    b.Property<int>("social_needs")
                        .HasColumnType("int");

                    b.Property<int>("stranger_friendly")
                        .HasColumnType("int");

                    b.Property<int>("suppressed_tail")
                        .HasColumnType("int");

                    b.Property<string>("temperament")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("vcahospitals_url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("vetstreet_url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("vocalisation")
                        .HasColumnType("int");

                    b.Property<int?>("weightid")
                        .HasColumnType("int");

                    b.Property<string>("wikipedia_url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.HasIndex("weightid");

                    b.ToTable("Racas");
                });

            modelBuilder.Entity("DesafioApi.Models.Weight", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("imperial")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("metric")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("Weights");
                });

            modelBuilder.Entity("DesafioApi.Models.Gato", b =>
                {
                    b.HasOne("DesafioApi.Models.Raca", "raca")
                        .WithMany("Gatos")
                        .HasForeignKey("racaid");
                });

            modelBuilder.Entity("DesafioApi.Models.Raca", b =>
                {
                    b.HasOne("DesafioApi.Models.Weight", "weight")
                        .WithMany()
                        .HasForeignKey("weightid");
                });
#pragma warning restore 612, 618
        }
    }
}
